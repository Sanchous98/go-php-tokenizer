// Code generated by "stringer -type=ItemType -linecomment"; DO NOT EDIT.

package tokenizer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[itemError - -1]
	_ = x[none-0]
	_ = x[TEof-1]
	_ = x[TThrow-259]
	_ = x[TInclude-261]
	_ = x[TIncludeOnce-262]
	_ = x[TRequire-263]
	_ = x[TRequireOnce-264]
	_ = x[TLogicalOr-265]
	_ = x[TLogicalXor-266]
	_ = x[TLogicalAnd-267]
	_ = x[TPrint-268]
	_ = x[TYield-269]
	_ = x[TDoubleArrow-270]
	_ = x[TYieldFrom-271]
	_ = x[TPlusEqual-272]
	_ = x[TMinusEqual-273]
	_ = x[TMulEqual-274]
	_ = x[TDivEqual-275]
	_ = x[TConcatEqual-276]
	_ = x[TModEqual-277]
	_ = x[TAndEqual-278]
	_ = x[TOrEqual-279]
	_ = x[TXorEqual-280]
	_ = x[TSlEqual-281]
	_ = x[TSrEqual-282]
	_ = x[TPowEqual-283]
	_ = x[TCoalesceEqual-284]
	_ = x[TCoalesce-285]
	_ = x[TBooleanOr-286]
	_ = x[TBooleanAnd-287]
	_ = x[TAmpersandNotFollowedByVarOrVarArg-288]
	_ = x[TAmpersandFollowedByVarOrVarArg-289]
	_ = x[TIsEqual-290]
	_ = x[TIsNotEqual-291]
	_ = x[TIsIdentical-292]
	_ = x[TIsNotIdentical-293]
	_ = x[TSpaceship-294]
	_ = x[TIsSmallerOrEqual-295]
	_ = x[TIsGreaterOrEqual-296]
	_ = x[TSl-297]
	_ = x[TSr-298]
	_ = x[TInstanceof-299]
	_ = x[TIntCast-300]
	_ = x[TDoubleCast-301]
	_ = x[TStringCast-302]
	_ = x[TArrayCast-303]
	_ = x[TObjectCast-304]
	_ = x[TBoolCast-305]
	_ = x[TUnsetCast-306]
	_ = x[TPow-307]
	_ = x[TClone-308]
	_ = x[TElseif-310]
	_ = x[TElse-311]
	_ = x[TLnumber-312]
	_ = x[TDnumber-313]
	_ = x[TString-314]
	_ = x[TNameFullyQualified-315]
	_ = x[TNameRelative-316]
	_ = x[TNameQualified-317]
	_ = x[TVariable-318]
	_ = x[TInlineHtml-319]
	_ = x[TEncapsedAndWhitespace-320]
	_ = x[TConstantEncapsedString-321]
	_ = x[TStringVarname-322]
	_ = x[TNumString-323]
	_ = x[TEval-324]
	_ = x[TNew-325]
	_ = x[TExit-326]
	_ = x[TIf-327]
	_ = x[TEndif-328]
	_ = x[TEcho-329]
	_ = x[TDo-330]
	_ = x[TWhile-331]
	_ = x[TEndwhile-332]
	_ = x[TFor-333]
	_ = x[TEndfor-334]
	_ = x[TForeach-335]
	_ = x[TEndforeach-336]
	_ = x[TDeclare-337]
	_ = x[TEnddeclare-338]
	_ = x[TAs-339]
	_ = x[TSwitch-340]
	_ = x[TEndswitch-341]
	_ = x[TCase-342]
	_ = x[TDefault-343]
	_ = x[TMatch-344]
	_ = x[TBreak-345]
	_ = x[TContinue-346]
	_ = x[TGoto-347]
	_ = x[TFunction-348]
	_ = x[TFn-349]
	_ = x[TConst-350]
	_ = x[TReturn-351]
	_ = x[TTry-352]
	_ = x[TCatch-353]
	_ = x[TFinally-354]
	_ = x[TUse-355]
	_ = x[TInsteadof-356]
	_ = x[TGlobal-357]
	_ = x[TStatic-358]
	_ = x[TAbstract-359]
	_ = x[TFinal-360]
	_ = x[TPrivate-361]
	_ = x[TProtected-362]
	_ = x[TPublic-363]
	_ = x[TReadonly-364]
	_ = x[TVar-365]
	_ = x[TUnset-366]
	_ = x[TIsset-367]
	_ = x[TEmpty-368]
	_ = x[THaltCompiler-369]
	_ = x[TClass-370]
	_ = x[TTrait-371]
	_ = x[TInterface-372]
	_ = x[TEnum-373]
	_ = x[TExtends-374]
	_ = x[TImplements-375]
	_ = x[TNamespace-376]
	_ = x[TList-377]
	_ = x[TArray-378]
	_ = x[TCallable-379]
	_ = x[TLine-380]
	_ = x[TFile-381]
	_ = x[TDir-382]
	_ = x[TClassC-383]
	_ = x[TTraitC-384]
	_ = x[TMethodC-385]
	_ = x[TFuncC-386]
	_ = x[TNsC-387]
	_ = x[TAttribute-388]
	_ = x[TInc-389]
	_ = x[TDec-390]
	_ = x[TObjectOperator-391]
	_ = x[TNullSafeObjectOperator-392]
	_ = x[TComment-393]
	_ = x[TDocComment-394]
	_ = x[TOpenTag-395]
	_ = x[TOpenTagWithEcho-396]
	_ = x[TCloseTag-397]
	_ = x[TWhitespace-398]
	_ = x[TStartHeredoc-399]
	_ = x[TEndHeredoc-400]
	_ = x[TDollarOpenCurlyBraces-401]
	_ = x[TCurlyOpen-402]
	_ = x[TPaamayimNekudotayim-403]
	_ = x[TNsSeparator-404]
	_ = x[TEllipsis-405]
	_ = x[ItemMax-406]
}

const (
	_ItemType_name_0 = "itemErrornoneTEof"
	_ItemType_name_1 = "T_THROW"
	_ItemType_name_2 = "T_INCLUDET_INCLUDE_ONCET_REQUIRET_REQUIRE_ONCET_LOGICAL_ORT_LOGICAL_XORT_LOGICAL_ANDT_PRINTT_YIELDT_DOUBLE_ARROWT_YIELD_FROMT_PLUS_EQUALT_MINUS_EQUALT_MUL_EQUALT_DIV_EQUALT_CONCAT_EQUALT_MOD_EQUALT_AND_EQUALT_OR_EQUALT_XOR_EQUALT_SL_EQUALT_SR_EQUALT_POW_EQUALT_COALESCE_EQUALT_COALESCET_BOOLEAN_ORT_BOOLEAN_ANDT_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARGT_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARGT_IS_EQUALT_IS_NOT_EQUALT_IS_IDENTICALT_IS_NOT_IDENTICALT_SPACESHIPT_IS_SMALLER_OR_EQUALT_IS_GREATER_OR_EQUALT_SLT_SRT_INSTANCEOFT_INT_CASTT_DOUBLE_CASTT_STRING_CASTT_ARRAY_CASTT_OBJECT_CASTT_BOOL_CASTT_UNSET_CASTT_POWT_CLONE"
	_ItemType_name_3 = "T_ELSEIFT_ELSET_LNUMBERT_DNUMBERT_STRINGT_NAME_FULLY_QUALIFIEDT_NAME_RELATIVET_NAME_QUALIFIEDT_VARIABLET_INLINE_HTMLT_ENCAPSED_AND_WHITESPACET_CONSTANT_ENCAPSED_STRINGT_STRING_VARNAMET_NUM_STRINGT_EVALT_NEWT_EXITT_IFT_ENDIFT_ECHOT_DOT_WHILET_ENDWHILET_FORT_ENDFORT_FOREACHT_ENDFOREACHT_DECLARET_ENDDECLARET_AST_SWITCHT_ENDSWITCHT_CASET_DEFAULTT_MATCHT_BREAKT_CONTINUET_GOTOT_FUNCTIONT_FNT_CONSTT_RETURNT_TRYT_CATCHT_FINALLYT_USET_INSTEADOFT_GLOBALT_STATICT_ABSTRACTT_FINALT_PRIVATET_PROTECTEDT_PUBLICT_READONLYT_VART_UNSETT_ISSETT_EMPTYT_HALT_COMPILERT_CLASST_TRAITT_INTERFACET_ENUMT_EXTENDST_IMPLEMENTST_NAMESPACET_LISTT_ARRAYT_CALLABLET_LINET_FILET_DIRT_CLASS_CT_TRAIT_CT_METHOD_CT_FUNC_CT_NS_CT_ATTRIBUTET_INCT_DECT_OBJECT_OPERATORT_NULLSAFE_OBJECT_OPERATORT_COMMENTT_DOC_COMMENTT_OPEN_TAGT_OPEN_TAG_WITH_ECHOT_CLOSE_TAGT_WHITESPACET_START_HEREDOCT_END_HEREDOCT_DOLLAR_OPEN_CURLY_BRACEST_CURLY_OPENT_PAAMAYIM_NEKUDOTAYIMT_NS_SEPARATORT_ELLIPSISItemMax"
)

var (
	_ItemType_index_0 = [...]uint8{0, 9, 13, 17}
	_ItemType_index_2 = [...]uint16{0, 9, 23, 32, 46, 58, 71, 84, 91, 98, 112, 124, 136, 149, 160, 171, 185, 196, 207, 217, 228, 238, 248, 259, 275, 285, 297, 310, 351, 388, 398, 412, 426, 444, 455, 476, 497, 501, 505, 517, 527, 540, 553, 565, 578, 589, 601, 606, 613}
	_ItemType_index_3 = [...]uint16{0, 8, 14, 23, 32, 40, 62, 77, 93, 103, 116, 141, 167, 183, 195, 201, 206, 212, 216, 223, 229, 233, 240, 250, 255, 263, 272, 284, 293, 305, 309, 317, 328, 334, 343, 350, 357, 367, 373, 383, 387, 394, 402, 407, 414, 423, 428, 439, 447, 455, 465, 472, 481, 492, 500, 510, 515, 522, 529, 536, 551, 558, 565, 576, 582, 591, 603, 614, 620, 627, 637, 643, 649, 654, 663, 672, 682, 690, 696, 707, 712, 717, 734, 760, 769, 782, 792, 812, 823, 835, 850, 863, 889, 901, 923, 937, 947, 954}
)

func (i ItemType) String() string {
	switch {
	case -1 <= i && i <= 1:
		i -= -1
		return _ItemType_name_0[_ItemType_index_0[i]:_ItemType_index_0[i+1]]
	case i == 259:
		return _ItemType_name_1
	case 261 <= i && i <= 308:
		i -= 261
		return _ItemType_name_2[_ItemType_index_2[i]:_ItemType_index_2[i+1]]
	case 310 <= i && i <= 406:
		i -= 310
		return _ItemType_name_3[_ItemType_index_3[i]:_ItemType_index_3[i+1]]
	default:
		return "ItemType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
