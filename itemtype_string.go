// Code generated by "stringer -type=ItemType -linecomment"; DO NOT EDIT.

package tokenizer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[itemError - -1]
	_ = x[none-0]
	_ = x[TEof-1]
	_ = x[TThrow-258]
	_ = x[TInclude-260]
	_ = x[TIncludeOnce-261]
	_ = x[TRequire-262]
	_ = x[TRequireOnce-263]
	_ = x[TLogicalOr-264]
	_ = x[TLogicalXor-265]
	_ = x[TLogicalAnd-266]
	_ = x[TPrint-267]
	_ = x[TYield-268]
	_ = x[TDoubleArrow-269]
	_ = x[TYieldFrom-270]
	_ = x[TPlusEqual-271]
	_ = x[TMinusEqual-272]
	_ = x[TMulEqual-273]
	_ = x[TDivEqual-274]
	_ = x[TConcatEqual-275]
	_ = x[TModEqual-276]
	_ = x[TAndEqual-277]
	_ = x[TOrEqual-278]
	_ = x[TXorEqual-279]
	_ = x[TSlEqual-280]
	_ = x[TSrEqual-281]
	_ = x[TPowEqual-282]
	_ = x[TCoalesceEqual-283]
	_ = x[TCoalesce-284]
	_ = x[TBooleanOr-285]
	_ = x[TBooleanAnd-286]
	_ = x[TAmpersandNotFollowedByVarOrVarArg-287]
	_ = x[TAmpersandFollowedByVarOrVarArg-288]
	_ = x[TIsEqual-289]
	_ = x[TIsNotEqual-290]
	_ = x[TIsIdentical-291]
	_ = x[TIsNotIdentical-292]
	_ = x[TSpaceship-293]
	_ = x[TIsSmallerOrEqual-294]
	_ = x[TIsGreaterOrEqual-295]
	_ = x[TSl-296]
	_ = x[TSr-297]
	_ = x[TInstanceof-298]
	_ = x[TIntCast-299]
	_ = x[TDoubleCast-300]
	_ = x[TStringCast-301]
	_ = x[TArrayCast-302]
	_ = x[TObjectCast-303]
	_ = x[TBoolCast-304]
	_ = x[TUnsetCast-305]
	_ = x[TPow-306]
	_ = x[TClone-307]
	_ = x[TElseif-309]
	_ = x[TElse-310]
	_ = x[TLnumber-311]
	_ = x[TDnumber-312]
	_ = x[TString-313]
	_ = x[TNameFullyQualified-314]
	_ = x[TNameRelative-315]
	_ = x[TNameQualified-316]
	_ = x[TVariable-317]
	_ = x[TInlineHtml-318]
	_ = x[TEncapsedAndWhitespace-319]
	_ = x[TConstantEncapsedString-320]
	_ = x[TStringVarname-321]
	_ = x[TNumString-322]
	_ = x[TEval-323]
	_ = x[TNew-324]
	_ = x[TExit-325]
	_ = x[TIf-326]
	_ = x[TEndif-327]
	_ = x[TEcho-328]
	_ = x[TDo-329]
	_ = x[TWhile-330]
	_ = x[TEndwhile-331]
	_ = x[TFor-332]
	_ = x[TEndfor-333]
	_ = x[TForeach-334]
	_ = x[TEndforeach-335]
	_ = x[TDeclare-336]
	_ = x[TEnddeclare-337]
	_ = x[TAs-338]
	_ = x[TSwitch-339]
	_ = x[TEndswitch-340]
	_ = x[TCase-341]
	_ = x[TDefault-342]
	_ = x[TMatch-343]
	_ = x[TBreak-344]
	_ = x[TContinue-345]
	_ = x[TGoto-346]
	_ = x[TFunction-347]
	_ = x[TFn-348]
	_ = x[TConst-349]
	_ = x[TReturn-350]
	_ = x[TTry-351]
	_ = x[TCatch-352]
	_ = x[TFinally-353]
	_ = x[TUse-354]
	_ = x[TInsteadof-355]
	_ = x[TGlobal-356]
	_ = x[TStatic-357]
	_ = x[TAbstract-358]
	_ = x[TFinal-359]
	_ = x[TPrivate-360]
	_ = x[TProtected-361]
	_ = x[TPublic-362]
	_ = x[TReadonly-363]
	_ = x[TVar-364]
	_ = x[TUnset-365]
	_ = x[TIsset-366]
	_ = x[TEmpty-367]
	_ = x[THaltCompiler-368]
	_ = x[TClass-369]
	_ = x[TTrait-370]
	_ = x[TInterface-371]
	_ = x[TEnum-372]
	_ = x[TExtends-373]
	_ = x[TImplements-374]
	_ = x[TNamespace-375]
	_ = x[TList-376]
	_ = x[TArray-377]
	_ = x[TCallable-378]
	_ = x[TLine-379]
	_ = x[TFile-380]
	_ = x[TDir-381]
	_ = x[TClassC-382]
	_ = x[TTraitC-383]
	_ = x[TMethodC-384]
	_ = x[TFuncC-385]
	_ = x[TNsC-386]
	_ = x[TAttribute-387]
	_ = x[TInc-388]
	_ = x[TDec-389]
	_ = x[TObjectOperator-390]
	_ = x[TNullSafeObjectOperator-391]
	_ = x[TComment-392]
	_ = x[TDocComment-393]
	_ = x[TOpenTag-394]
	_ = x[TOpenTagWithEcho-395]
	_ = x[TCloseTag-396]
	_ = x[TWhitespace-397]
	_ = x[TStartHeredoc-398]
	_ = x[TEndHeredoc-399]
	_ = x[TDollarOpenCurlyBraces-400]
	_ = x[TCurlyOpen-401]
	_ = x[TPaamayimNekudotayim-402]
	_ = x[TNsSeparator-403]
	_ = x[TEllipsis-404]
	_ = x[ItemMax-405]
}

const (
	_ItemType_name_0 = "itemErrornoneTEof"
	_ItemType_name_1 = "T_THROW"
	_ItemType_name_2 = "T_INCLUDET_INCLUDE_ONCET_REQUIRET_REQUIRE_ONCET_LOGICAL_ORT_LOGICAL_XORT_LOGICAL_ANDT_PRINTT_YIELDT_DOUBLE_ARROWT_YIELD_FROMT_PLUS_EQUALT_MINUS_EQUALT_MUL_EQUALT_DIV_EQUALT_CONCAT_EQUALT_MOD_EQUALT_AND_EQUALT_OR_EQUALT_XOR_EQUALT_SL_EQUALT_SR_EQUALT_POW_EQUALT_COALESCE_EQUALT_COALESCET_BOOLEAN_ORT_BOOLEAN_ANDT_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARGT_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARGT_IS_EQUALT_IS_NOT_EQUALT_IS_IDENTICALT_IS_NOT_IDENTICALT_SPACESHIPT_IS_SMALLER_OR_EQUALT_IS_GREATER_OR_EQUALT_SLT_SRT_INSTANCEOFT_INT_CASTT_DOUBLE_CASTT_STRING_CASTT_ARRAY_CASTT_OBJECT_CASTT_BOOL_CASTT_UNSET_CASTT_POWT_CLONE"
	_ItemType_name_3 = "T_ELSEIFT_ELSET_LNUMBERT_DNUMBERT_STRINGT_NAME_FULLY_QUALIFIEDT_NAME_RELATIVET_NAME_QUALIFIEDT_VARIABLET_INLINE_HTMLT_ENCAPSED_AND_WHITESPACET_CONSTANT_ENCAPSED_STRINGT_STRING_VARNAMET_NUM_STRINGT_EVALT_NEWT_EXITT_IFT_ENDIFT_ECHOT_DOT_WHILET_ENDWHILET_FORT_ENDFORT_FOREACHT_ENDFOREACHT_DECLARET_ENDDECLARET_AST_SWITCHT_ENDSWITCHT_CASET_DEFAULTT_MATCHT_BREAKT_CONTINUET_GOTOT_FUNCTIONT_FNT_CONSTT_RETURNT_TRYT_CATCHT_FINALLYT_USET_INSTEADOFT_GLOBALT_STATICT_ABSTRACTT_FINALT_PRIVATET_PROTECTEDT_PUBLICT_READONLYT_VART_UNSETT_ISSETT_EMPTYT_HALT_COMPILERT_CLASST_TRAITT_INTERFACET_ENUMT_EXTENDST_IMPLEMENTST_NAMESPACET_LISTT_ARRAYT_CALLABLET_LINET_FILET_DIRT_CLASS_CT_TRAIT_CT_METHOD_CT_FUNC_CT_NS_CT_ATTRIBUTET_INCT_DECT_OBJECT_OPERATORT_NULLSAFE_OBJECT_OPERATORT_COMMENTT_DOC_COMMENTT_OPEN_TAGT_OPEN_TAG_WITH_ECHOT_CLOSE_TAGT_WHITESPACET_START_HEREDOCT_END_HEREDOCT_DOLLAR_OPEN_CURLY_BRACEST_CURLY_OPENT_PAAMAYIM_NEKUDOTAYIMT_NS_SEPARATORT_ELLIPSISItemMax"
)

var (
	_ItemType_index_0 = [...]uint8{0, 9, 13, 17}
	_ItemType_index_2 = [...]uint16{0, 9, 23, 32, 46, 58, 71, 84, 91, 98, 112, 124, 136, 149, 160, 171, 185, 196, 207, 217, 228, 238, 248, 259, 275, 285, 297, 310, 351, 388, 398, 412, 426, 444, 455, 476, 497, 501, 505, 517, 527, 540, 553, 565, 578, 589, 601, 606, 613}
	_ItemType_index_3 = [...]uint16{0, 8, 14, 23, 32, 40, 62, 77, 93, 103, 116, 141, 167, 183, 195, 201, 206, 212, 216, 223, 229, 233, 240, 250, 255, 263, 272, 284, 293, 305, 309, 317, 328, 334, 343, 350, 357, 367, 373, 383, 387, 394, 402, 407, 414, 423, 428, 439, 447, 455, 465, 472, 481, 492, 500, 510, 515, 522, 529, 536, 551, 558, 565, 576, 582, 591, 603, 614, 620, 627, 637, 643, 649, 654, 663, 672, 682, 690, 696, 707, 712, 717, 734, 760, 769, 782, 792, 812, 823, 835, 850, 863, 889, 901, 923, 937, 947, 954}
)

func (i ItemType) String() string {
	switch {
	case -1 <= i && i <= 1:
		i -= -1
		return _ItemType_name_0[_ItemType_index_0[i]:_ItemType_index_0[i+1]]
	case i == 258:
		return _ItemType_name_1
	case 260 <= i && i <= 307:
		i -= 260
		return _ItemType_name_2[_ItemType_index_2[i]:_ItemType_index_2[i+1]]
	case 309 <= i && i <= 405:
		i -= 309
		return _ItemType_name_3[_ItemType_index_3[i]:_ItemType_index_3[i+1]]
	default:
		return "ItemType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
